package com.virtualprodigyllc.sampler;

import java.util.Vector;

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

import com.virtualprodigyllc.sampler.MainActivity.DemoTypes;
import com.virtualprodigyllc.sampler.utils.AnimatedListAdapter;
import com.virtualprodigyllc.sampler.utils.AnimatedListView;

import fragments.SelectSampleFragment.Callback;
import fragments.SelectSampleFragment.DemosInfo;

public class SMSFragment extends Fragment{
	
	public interface Callback {
		public void finishedSendingSMS();
	}
	
    public SMSFragment() {
    }
    
    AnimatedListView demoOptions;
    Context fragmentContext;
    Resources res;
    private Callback callback;
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View fragView = inflater.inflate(R.layout.main_layout, container, false);
        demoOptions = (AnimatedListView) fragView.findViewById(R.id.demoOptsListView);
		fragmentContext = getActivity();
		res = getResources();
        
		
        return fragView;
    }
    
  private OnClickListener clickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			
		}  
  };
  
	@Override
	public void onAttach(Activity activity) {

		super.onAttach(activity);
		try {
			callback = (Callback) activity;
		} catch (ClassCastException e) {
			throw new ClassCastException(activity.toString()
					+ " must implement Callbacks");
		}
	}
    
    private Vector<DemosInfo> generateDemoInfoObjs(){
    	Vector<DemosInfo> demos = new Vector <DemosInfo>(); 
    	demos.add(new DemosInfo(res.getString(R.string.default_text), res.getString(R.string.default_text), DemoTypes.None));//MB until i get the offset working properly heres an invisible place holder
    	
    	demos.add(new DemosInfo(res.getString(R.string.sms_title), res.getString(R.string.sms_desc), DemoTypes.SMS));
    	demos.add(new DemosInfo(res.getString(R.string.cal_title), res.getString(R.string.cal_desc), DemoTypes.CAL));
    	demos.add(new DemosInfo(res.getString(R.string.map_title), res.getString(R.string.map_desc), DemoTypes.MAP));
    	demos.add(new DemosInfo(res.getString(R.string.alert_dialog_title), res.getString(R.string.alert_dialog_desc), DemoTypes.ALERT));
    	demos.add(new DemosInfo(res.getString(R.string.fragment_title), res.getString(R.string.fragment_desc), DemoTypes.FRAG));
    	//will add these another night
//    	demos.add(new DemosInfo(res.getString(R.string.spinning_title), res.getString(R.string.shaker_desc), demoTypes.SPINNING));
//    	demos.add(new DemosInfo(res.getString(R.string.shaker_title), res.getString(R.string.spinning_desc), demoTypes.SHAKER));
    	
    	demos.add(new DemosInfo(res.getString(R.string.default_text), res.getString(R.string.default_text), DemoTypes.None));//MB until i get the offset working properly heres an invisible place holder
    	
    	return demos;
    }
    
    public class DemosInfo{
    	private String title;
    	private String description;
    	private DemoTypes type;
    	
    	public DemosInfo(String title, String descip, DemoTypes type){
    		this.title = title;
    		this.description = descip;
    		this.type = type;
    	}
    	
    	public String getTitle() {
			return title;
		}
		public void setTitle(String title) {
			this.title = title;
		}
		public String getDescription() {
			return description;
		}
		public void setDescription(String description) {
			this.description = description;
		}

		public DemoTypes getType() {
			return type;
		}

		public void setType(DemoTypes type) {
			this.type = type;
		}
		
    }
}
